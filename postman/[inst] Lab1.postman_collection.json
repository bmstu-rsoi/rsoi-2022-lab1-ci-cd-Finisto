{
	"info": {
		"_postman_id": "79fde698-cad9-40c9-a7ba-26519344a053",
		"name": "[inst] Lab1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Person REST API operations",
			"item": [
				{
					"name": "Create new Person",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Get personId from location header', () => {",
									"    pm.response.to.have.status(201)",
									"",
									"    const request = JSON.parse(pm.request.body)",
									"    pm.collectionVariables.set(\"name\", request.name)",
									"    pm.collectionVariables.set(\"address\", request.address)",
									"    pm.collectionVariables.set(\"work\", request.work)",
									"    pm.collectionVariables.set(\"age\", request.age)",
									"",
									"    const location = pm.response.headers.get(\"Location\")",
									"    pm.expect(location).to.not.empty;",
									"    var personId = location.split(\"/\").pop()",
									"    pm.collectionVariables.set(\"personId\", Number(personId))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{$randomUserName}}\",\n    \"address\": \"{{$randomStreetAddress}}\",\n    \"work\": \"{{$randomCompanyName}}\",\n    \"age\": 31\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/persons",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"persons"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Persons by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Check Person', () => {",
									"    pm.response.to.have.status(200)",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"    ",
									"    const response = pm.response.json();",
									"    pm.expect(response.id).to.eq(pm.collectionVariables.get('personId'))",
									"    pm.expect(response.name).to.eq(pm.collectionVariables.get('name'))",
									"    pm.expect(response.address).to.eq(pm.collectionVariables.get('address'))",
									"    pm.expect(response.work).to.eq(pm.collectionVariables.get('work'))",
									"    pm.expect(response.age).to.eq(pm.collectionVariables.get('age'))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/persons/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"persons",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{personId}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Persons",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Check Person exists in response', () => {",
									"    pm.response.to.have.status(200)",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an(\"array\")",
									"",
									"    const personId = pm.collectionVariables.get('personId')",
									"    const item = _.find(response, { \"id\": personId })",
									"    pm.expect(item).to.be.not.undefined",
									"    pm.expect(item.id).to.eq(personId)",
									"    pm.expect(item.name).to.eq(pm.collectionVariables.get('name'))",
									"    pm.expect(item.address).to.eq(pm.collectionVariables.get('address'))",
									"    pm.expect(item.work).to.eq(pm.collectionVariables.get('work'))",
									"    pm.expect(item.age).to.eq(pm.collectionVariables.get('age'))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/persons",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"persons"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Person by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Check Person updated', () => {",
									"    pm.response.to.have.status(200)",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"    ",
									"    const request = JSON.parse(pm.request.body)",
									"    const response = pm.response.json();",
									"    pm.expect(response.id).to.eq(pm.collectionVariables.get('personId'))",
									"    pm.expect(response.name).to.eq(request.name)",
									"    pm.expect(response.address).to.eq(request.address)",
									"    pm.expect(response.work).to.eq(pm.collectionVariables.get('work'))",
									"    pm.expect(response.age).to.eq(pm.collectionVariables.get('age'))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{$randomUserName}}\",\n    \"address\": \"{{$randomStreetAddress}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/persons/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"persons",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{personId}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Person by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Check Person removed', () => {",
									"    pm.response.to.have.status(204)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/persons/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"persons",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{personId}}",
									"description": "(Required) "
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "address",
			"value": ""
		},
		{
			"key": "work",
			"value": ""
		},
		{
			"key": "age",
			"value": ""
		},
		{
			"key": "personId",
			"value": ""
		}
	]
}